<theme-toggle>
  <button class="theme-toggle-button" aria-label="Toggle theme">
    <svg class="theme-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <!-- Sun icon (visible in light mode) -->
      <g class="sun-part">
        <circle cx="12" cy="12" r="5"></circle>
        <line x1="12" y1="1" x2="12" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="23"></line>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
        <line x1="1" y1="12" x2="3" y2="12"></line>
        <line x1="21" y1="12" x2="23" y2="12"></line>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
      </g>
      
      <!-- Moon icon (visible in dark mode) -->
      <path class="moon-part" d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>
  </button>
</theme-toggle>

<style>
  .theme-toggle-button {
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s;
  }
  
  .theme-toggle-button:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }
  
  :global(.dark) .theme-toggle-button:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  .theme-icon {
    width: 24px;
    height: 24px;
  }

  .sun-part {
    opacity: 1;
    transition: opacity 0.5s ease;
  }
  
  .moon-part {
    opacity: 0;
    transition: opacity 0.5s ease;
  }

  :global(.dark) .sun-part {
    opacity: 0;
  }
  
  :global(.dark) .moon-part {
    opacity: 1;
  }
</style>

<script>
  class ThemeToggle extends HTMLElement {
    private readonly STORAGE_KEY = "theme-preference";
    private _darkTheme = false;
    private button: HTMLButtonElement | null;

    constructor() {
      super();
      this.button = this.querySelector("button");

      // Load theme preference
      const savedTheme = localStorage.getItem(this.STORAGE_KEY);
      if (!savedTheme) {
        this.darkTheme = window.matchMedia(
          "(prefers-color-scheme: dark)",
        ).matches;
      } else {
        this.darkTheme = savedTheme === "dark";
      }

      // Setup event listeners
      this.button?.addEventListener("click", () => {
        this.darkTheme = !this.darkTheme;
        localStorage.setItem(
          this.STORAGE_KEY,
          this.darkTheme ? "dark" : "light",
        );
      });

      // Listen for system theme changes
      window
        .matchMedia("(prefers-color-scheme: dark)")
        .addEventListener("change", (e) => {
          if (!localStorage.getItem(this.STORAGE_KEY)) {
            this.darkTheme = e.matches;
          }
        });
    }

    get darkTheme(): boolean {
      return this._darkTheme;
    }

    set darkTheme(value: boolean) {
      this._darkTheme = value;
      if (value) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }

      if (!this.button) {
        return;
      }

      this.button.setAttribute(
        "aria-label",
        value ? "Switch to light theme" : "Switch to dark theme",
      );
    }
  }
  customElements.define("theme-toggle", ThemeToggle);
</script>