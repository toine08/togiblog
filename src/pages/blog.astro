---
import Layout from "../components/layout.astro"
const posts = await Astro.glob('../pages/posts/*.md');

const getTags =()=>{
  let post: any
  let arrTags: any[] = []
  for(post in posts){
    arrTags =arrTags.concat(posts[post].frontmatter.tags)
  }
  return [...new Set(arrTags)]; // Remove duplicates
}
const allTags = getTags()
---

<Layout title="Articles">
  <div class="container max-w-4xl mx-auto">
    <h1 class="text-4xl font-bold bg-gradient-to-r from-blue-600 to-blue-400 bg-clip-text text-transparent mb-8">
      Latest Articles
    </h1>
    
    {/* Tags container */}
    <div class="mb-8">
      <ul class="flex flex-wrap gap-2">
        <li 
          class="flex items-center text-xs bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded-md px-3 py-1 transition-all hover:bg-blue-100 dark:hover:bg-blue-900 cursor-pointer"
          data-tag="all"
        >
          <span class="w-2 h-2 rounded-full bg-blue-500 mr-1.5"></span>
          All
        </li>
        {allTags.map((tag: string) => (
          <li 
            class="flex items-center text-xs bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded-md px-3 py-1 transition-all hover:bg-blue-100 dark:hover:bg-blue-900 cursor-pointer"
            data-tag={tag}
          >
            <span class="w-2 h-2 rounded-full bg-blue-500 mr-1.5"></span>
            {tag}
          </li>
        ))}
      </ul>
    </div>

    {/* Posts list */}
    <div class="space-y-6">
      {posts.map((post) => (
        <div class="bg-white/80 dark:bg-gray-800/80 shadow-md rounded-lg overflow-hidden transition-transform duration-200 hover:scale-105 post-item backdrop-blur-sm" data-tags={post.frontmatter.tags.join(',')}>
          <article class="p-6">
            <a class="block space-y-4" href={post.url}>
              <h2 class="text-xl font-semibold text-gray-900 dark:text-white">
                {post.frontmatter.title}
              </h2>
              <p class="text-gray-600 dark:text-gray-300">
                {post.frontmatter.description}
              </p>
              <p class="text-sm text-gray-500 dark:text-gray-400">
                Published: {new Date(post.frontmatter.date).toLocaleDateString("en-GB")}
              </p>
            </a>
            <div class="flex items-center justify-between mt-6">
              <a 
                href={post.url} 
                class="text-blue-600 dark:text-blue-400 hover:underline font-medium"
              >
                Read more â†’
              </a>
              <ul class="flex flex-wrap gap-2">
                {(post.frontmatter.tags || []).map((tag: string) => (
                  <li class="flex items-center text-xs bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded-md px-3 py-1">
                    <span class="w-2 h-2 rounded-full bg-blue-500 mr-1.5"></span>
                    {tag}
                  </li>
                ))}
              </ul>
            </div>
          </article>
        </div>
      ))}
    </div>
  </div>
</Layout>

<script>
  const tagElements = document.querySelectorAll('[data-tag]');
  const postElements = document.querySelectorAll('.post-item');

  tagElements.forEach(tagEl => {
    tagEl.addEventListener('click', () => {
      const selectedTag = tagEl.getAttribute('data-tag') || 'all';
      
      // Update active state
      tagElements.forEach(el => el.classList.remove('bg-blue-100', 'dark:bg-blue-900'));
      tagEl.classList.add('bg-blue-100', 'dark:bg-blue-900');

      // Filter posts
      postElements.forEach(post => {
        const postTags = (post.getAttribute('data-tags') || '').split(',');
        if (selectedTag === 'all' || postTags.includes(selectedTag)) {
          (post as HTMLElement).style.display = '';
        } else {
          (post as HTMLElement).style.display = 'none';
        }
      });
    });
  });

  // Set "All" as initially active
  document.querySelector('[data-tag="all"]')?.classList.add('bg-blue-100', 'dark:bg-blue-900');
</script>